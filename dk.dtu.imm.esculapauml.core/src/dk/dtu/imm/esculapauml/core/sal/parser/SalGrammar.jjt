 /**
 * JJTree grammar for SAL language (Simple Action Language).
 * Author: Piotr J. Puczynski (DTU Informatics)
 */options{  STATIC = false;  NODE_CLASS = "SALNode";  MULTI = true;
  NODE_PREFIX = "SAL";
  VISITOR = true;
  VISITOR_RETURN_TYPE = "org.eclipse.uml2.uml.ValueSpecification";}PARSER_BEGIN(SALParser)package dk.dtu.imm.esculapauml.core.sal.parser;import java.io.StringReader;import java.io.Reader;public class SALParser{  public SALParser(String s)  {    this ((Reader) (new StringReader(s)));  }}PARSER_END(SALParser)/** Skip these characters, they are considered "white space" **/SKIP :{  " "| "\t"| "\r"| "\n"}TOKEN :{  < AND : "&&" >| < OR : "||" >| < REPLY : "reply" >| < ASSIGN : ":=" >| < EQUALS : "=" >| < NOTEQUAL : "<>" >}TOKEN :{  < INTEGER_CONSTANT : (< DIGIT >)+ >| < LOGIC_CONSTANT :    "true"  | "false" >| < STRING_CONSTANT : "\"" (~[ "\"" ])+ "\"" >| < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : ([ "a"-"z", "A"-"Z", "_" ]) >}TOKEN :{  < LPAREN : "(" >| < RPAREN : ")" >| < DOT : "." >| < SEMICOLON : ";" >| < COMMA : "," >}SALNode parse() #Root :{}{  (    (      Statement()    )    (      < SEMICOLON >      (        Statement()      )?    )*  )?  < EOF >  {    return jjtThis;  }}void Statement() #void :{}{  Expression()| ReplyStatement()}void Expression() #void :{}{  IntegerConstant()| LogicConstant()| StringConstant()| LOOKAHEAD(2)  Assignment()| IdentifiedExpression()}void IdentifiedExpression() #void :{}{  LOOKAHEAD(2)  Call()| LOOKAHEAD(2)  MemeberOp()| Identifier()}void Assignment() :{  Token t;}{  t = < IDENTIFIER > < ASSIGN > Expression()  {    jjtThis.jjtSetValue(t.image);  }}void ReplyStatement() :{}{  < REPLY > Expression()}void IntegerConstant() :{  Token t;}{  t = < INTEGER_CONSTANT >  {    jjtThis.jjtSetValue(Integer.valueOf(t.image));  }}void LogicConstant() :{  Token t;}{  t = < LOGIC_CONSTANT >  {    jjtThis.jjtSetValue(((String) t.image).equals("true"));  }}void StringConstant() :{  Token t;}{  t = < STRING_CONSTANT >  {    jjtThis.jjtSetValue(t.image.substring(1, t.image.length() - 1));  }}void Identifier() :{  Token t;}{  t = < IDENTIFIER >  {    jjtThis.jjtSetValue(t.image);  }}void Call() :{  Token t;}{  t = < IDENTIFIER > Parameters()  {    jjtThis.jjtSetValue(t.image);  }}void MemeberOp() :{}{  Identifier() < DOT > IdentifiedExpression()}void Parameters() :{}{  < LPAREN >  (    (      Expression()    )    (      < COMMA > Expression()    )*  )?  < RPAREN >}
