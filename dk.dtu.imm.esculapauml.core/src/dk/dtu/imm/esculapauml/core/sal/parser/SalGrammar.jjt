 /**
 * JJTree grammar for SAL language (Simple Action Language).
 * Author: Piotr J. Puczynski (DTU Informatics)
 */options{  STATIC = false;  NODE_CLASS = "SALNode";  MULTI = true;  NODE_PREFIX = "SAL";  VISITOR = true;  VISITOR_DATA_TYPE = "dk.dtu.imm.esculapauml.core.sal.SALEvaluationHelper";  VISITOR_RETURN_TYPE = "org.eclipse.uml2.uml.ValueSpecification";}PARSER_BEGIN(SALParser)package dk.dtu.imm.esculapauml.core.sal.parser;import java.io.StringReader;import java.io.Reader;public class SALParser{  public SALParser(String s)  {    this ((Reader) (new StringReader(s)));  }}PARSER_END(SALParser)/** Skip these characters, they are considered "white space" **/SKIP :{  " "| "\t"| "\r"| "\n"}TOKEN :{  < REPLY : "reply" >| < ASSIGN : ":=" >| < PLUS : "+" >| < MINUS : "-" >| < MUL : "*" >| < DIV : "/" >| < AND : "and" >| < OR : "or" >| < NOT : "not" >}TOKEN :{  < INTEGER_CONSTANT : (< DIGIT >)+ >| < LOGIC_CONSTANT :    "true"  | "false" >| < NULL_CONSTANT : "null" >| < STRING_CONSTANT : "\"" (~[ "\"" ])+ "\"" >| < OCL_EXPRESSION : "ocl(`" (~[ "`" ])+ "`)" >| < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : ([ "a"-"z", "A"-"Z", "_" ]) >}TOKEN :{  < LPAREN : "(" >| < RPAREN : ")" >| < DOT : "." >| < SEMICOLON : ";" >| < COMMA : "," >}SALNode parse() #Root :{}{  (    (      Statement()    )    (      < SEMICOLON >      (        Statement()      )?    )*  )?  < EOF >  {    return jjtThis;  }}void Statement() #void :{}{  LOOKAHEAD(2)  Assignment()| Expression()| ReplyStatement()}void Expression() #void :{}{  SubtractiveExpr()  (    < PLUS > SubtractiveExpr() #Add(2))*}void SubtractiveExpr() #void :{}{  MultiplicativeExpr()  (    < MINUS > MultiplicativeExpr() #Substract(2))*}void MultiplicativeExpr() #void :{}{  DivExpr()  (    < MUL > DivExpr() #Mult(2))*}void DivExpr() #void :{}{  (    Expression2()  )  (    < DIV > Expression2() #Div(2))*}void Expression2() #void :{}{  IntegerConstant()| LogicConstant()| NullConstant()| StringConstant()| OCLExpression()|  (    < LPAREN > Expression() < RPAREN >  )| IdentifiedExpression()}void Assignment() :{  Token t;}{  t = < IDENTIFIER > < ASSIGN > Expression()  {    jjtThis.jjtSetValue(t.image);  }}void ReplyStatement() :{}{  < REPLY > Expression()}void IntegerConstant() :{  Token t;}{  (    t = < INTEGER_CONSTANT >    {      jjtThis.jjtSetValue(Integer.valueOf(t.image));    }  | < MINUS > t = < INTEGER_CONSTANT >    {      jjtThis.jjtSetValue(- Integer.valueOf(t.image));    }  )}void LogicConstant() :{  Token t;}{  t = < LOGIC_CONSTANT >  {    jjtThis.jjtSetValue(((String) t.image).equals("true"));  }}void NullConstant() :{}{  < NULL_CONSTANT >}void StringConstant() :{  Token t;}{  t = < STRING_CONSTANT >  {    jjtThis.jjtSetValue(t.image.substring(1, t.image.length() - 1));  }}void OCLExpression() :{  Token t;}{  t = < OCL_EXPRESSION >  {    jjtThis.jjtSetValue(t.image.substring(5, t.image.length() - 2));  }}void IdentifiedExpression() #void :{}{  (    LOOKAHEAD(2)    Call()  | Ident()  )  (    LOOKAHEAD(3)    < DOT > Call() #MemberCall(2)| < DOT > Ident() #Member(2))*}void Ident() :{  Token t;}{  t = < IDENTIFIER >  {    jjtThis.jjtSetValue(t.image);  }}void Call() :{  Token t;}{  t = < IDENTIFIER > Parameters()  {    jjtThis.jjtSetValue(t.image);  }}void Parameters() #void :{}{  < LPAREN >  (    (      Expression()    )    (      < COMMA > Expression()    )*  )?  < RPAREN >}
