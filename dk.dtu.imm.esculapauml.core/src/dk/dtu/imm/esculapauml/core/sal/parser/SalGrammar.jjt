 /**
 * JJTree grammar for SAL language.
 */options{  STATIC = false;  NODE_CLASS = "SALNode";}PARSER_BEGIN(SALParser)package dk.dtu.imm.esculapauml.core.sal.parser;import java.io.StringReader;import java.io.Reader;public class SALParser{  public SALParser(String s)  {    this ((Reader) (new StringReader(s)));  }}PARSER_END(SALParser)/** Skip these characters, they are considered "white space" **/SKIP :{  " "| "\t"| "\r"| "\n"}TOKEN :{  < AND : "&&" >| < OR : "||" >| < REPLY : "reply" >| < ASSIGN : ":=" >| < EQUALS : "=" >| < NOTEQUAL : "<>" >}TOKEN :{  < INTEGER_CONSTANT : (< DIGIT >)+ >| < LOGIC_CONSTANT :    "true"  | "false" >| < STRING_CONSTANT : "\"" (~[ "\"" ])+ "\"" >| < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : ([ "a"-"z", "A"-"Z", "_" ]) >}TOKEN :{  < LPAREN : "(" >| < RPAREN : ")" >| < DOT : "." >| < SEMICOLON : ";" >| < COMMA : "," >}SALNode parse() #Root :{}{  (    (      statement()    )    (      < SEMICOLON >      (        statement()      )?    )*  )?  < EOF >  {    return jjtThis;  }}void statement() #void :{}{  expression()| replyStatement()}void expression() #void :{}{  integerConstant()| logicConstant()| stringConstant()| LOOKAHEAD(2)  assignment()| identifiedExpression()}void identifiedExpression() #void :{}{  LOOKAHEAD(2)  call()| LOOKAHEAD(2)  memeberOp()| identifier()}void assignment() :{  Token t;}{  t = < IDENTIFIER > < ASSIGN > expression()  {    jjtThis.jjtSetValue(t.image);  }}void replyStatement() :{}{  < REPLY > expression()}void integerConstant() :{  Token t;}{  t = < INTEGER_CONSTANT >  {    jjtThis.jjtSetValue(Integer.valueOf(t.image));  }}void logicConstant() :{  Token t;}{  t = < LOGIC_CONSTANT >  {    jjtThis.jjtSetValue(((String) t.image).equals("true"));  }}void stringConstant() :{  Token t;}{  t = < STRING_CONSTANT >  {    jjtThis.jjtSetValue(t.image.substring(1, t.image.length() - 1));  }}void identifier() :{  Token t;}{  t = < IDENTIFIER >  {    jjtThis.jjtSetValue(t.image);  }}void call() :{  Token t;}{  t = < IDENTIFIER > parameters()  {    jjtThis.jjtSetValue(t.image);  }}void memeberOp() :{}{  identifier() < DOT > identifiedExpression()}void parameters() :{}{  < LPAREN >  (    (      expression()    )    (      < COMMA > expression()    )*  )?  < RPAREN >}
